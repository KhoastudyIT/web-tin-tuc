import React from 'react';
import { Container, Row, Col, Card, Badge, Spinner, Alert } from 'react-bootstrap';
import { useQuery } from 'react-query';
import { newsService } from '../services/newsService';
import { NewsItemList } from '../types/news';
import NewsCard from '../components/NewsCard';
import { formatDistanceToNow } from 'date-fns';
import { vi } from 'date-fns/locale';

const HomePage: React.FC = () => {
  // L·∫•y tin t·ª©c t·ª´ API th·∫≠t
  const { 
    data: featuredNews = [], 
    isLoading: featuredLoading, 
    error: featuredError 
  } = useQuery(['featured-news'], () => newsService.getFeaturedNews(5), {
    refetchOnWindowFocus: false,
    staleTime: 2 * 60 * 1000, // 2 ph√∫t
    cacheTime: 5 * 60 * 1000  // 5 ph√∫t
  });

  const { 
    data: latestNews = [], 
    isLoading: latestLoading, 
    error: latestError 
  } = useQuery(['latest-news'], () => newsService.getLatestNews(10), {
    refetchOnWindowFocus: false,
    staleTime: 1 * 60 * 1000, // 1 ph√∫t
    cacheTime: 3 * 60 * 1000  // 3 ph√∫t
  });

  const { 
    data: popularNews = [], 
    isLoading: popularLoading, 
    error: popularError 
  } = useQuery(['popular-news'], () => newsService.getPopularNews(5), {
    refetchOnWindowFocus: false,
    staleTime: 5 * 60 * 1000, // 5 ph√∫t
    cacheTime: 10 * 60 * 1000 // 10 ph√∫t
  });

  // Debug: Log d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra
  React.useEffect(() => {
    console.log('üè† HomePage - Featured News:', featuredNews);
    console.log('üè† HomePage - Latest News:', latestNews);
    console.log('üè† HomePage - Popular News:', popularNews);
    console.log('üè† HomePage - Featured Loading:', featuredLoading);
    console.log('üè† HomePage - Latest Loading:', latestLoading);
    console.log('üè† HomePage - Popular Loading:', popularLoading);
    console.log('üè† HomePage - Featured Error:', featuredError);
    console.log('üè† HomePage - Latest Error:', latestError);
    console.log('üè† HomePage - Popular Error:', popularError);
  }, [featuredNews, latestNews, popularNews, featuredLoading, latestLoading, popularLoading, featuredError, latestError, popularError]);

  const formatDate = (dateString: string) => {
    try {
      return formatDistanceToNow(new Date(dateString), {
        addSuffix: true,
        locale: vi
      });
    } catch {
      return 'V·ª´a xong';
    }
  };

  // Loading state
  if (featuredLoading || latestLoading || popularLoading) {
    return (
      <Container className="py-5">
        <div className="text-center">
          <Spinner animation="border" role="status" variant="primary">
            <span className="visually-hidden">ƒêang t·∫£i...</span>
          </Spinner>
          <p className="mt-3 text-muted">ƒêang t·∫£i tin t·ª©c...</p>
        </div>
      </Container>
    );
  }

  // Error state
  if (featuredError || latestError || popularError) {
    return (
      <Container className="py-5">
        <Alert variant="danger">
          <Alert.Heading>C√≥ l·ªói x·∫£y ra</Alert.Heading>
          <p>Kh√¥ng th·ªÉ t·∫£i tin t·ª©c. Vui l√≤ng th·ª≠ l·∫°i sau.</p>
          <p className="mb-0">
            <small>Chi ti·∫øt: {(featuredError as any)?.message || (latestError as any)?.message || (popularError as any)?.message}</small>
          </p>
        </Alert>
      </Container>
    );
  }

  return (
    <Container className="py-4">
      {/* Tin t·ª©c n·ªïi b·∫≠t */}
      {featuredNews && featuredNews.length > 0 && (
        <section className="mb-5">
          <h2 className="mb-4 fw-bold text-primary">
            <i className="fas fa-star me-2"></i>
            Tin t·ª©c n·ªïi b·∫≠t
          </h2>
          <Row>
            {featuredNews.slice(0, 1).map((news) => (
              <Col lg={8} key={news.id}>
                <Card className="h-100 border-0 shadow-sm">
                  {news.image_url && (
                    <Card.Img
                      variant="top"
                      src={news.image_url}
                      alt={news.title}
                      style={{ height: '300px', objectFit: 'cover' }}
                    />
                  )}
                  <Card.Body className="p-4">
                    <div className="mb-3">
                      <Badge 
                        bg="primary" 
                        style={{ backgroundColor: news.category.color }}
                        className="me-2"
                      >
                        {news.category.name}
                      </Badge>
                      <Badge bg="warning" text="dark">
                        N·ªïi b·∫≠t
                      </Badge>
                    </div>
                    <Card.Title className="h3 fw-bold mb-3">
                      {news.title}
                    </Card.Title>
                    {news.summary && (
                      <Card.Text className="text-muted mb-3">
                        {news.summary}
                      </Card.Text>
                    )}
                    <div className="d-flex justify-content-between align-items-center text-muted">
                      <small>
                        {news.author && `B·ªüi ${news.author}`}
                      </small>
                      <small>
                        {formatDate(news.created_at)}
                      </small>
                    </div>
                  </Card.Body>
                </Card>
              </Col>
            ))}
            <Col lg={4}>
              <Row>
                {featuredNews.slice(1, 3).map((news) => (
                  <Col sm={6} lg={12} key={news.id} className="mb-3">
                    <NewsCard news={news} featured />
                  </Col>
                ))}
              </Row>
            </Col>
          </Row>
        </section>
      )}

      {/* Tin t·ª©c m·ªõi nh·∫•t */}
      <section className="mb-5">
        <h2 className="mb-4 fw-bold text-success">
          <i className="fas fa-clock me-2"></i>
          Tin t·ª©c m·ªõi nh·∫•t
        </h2>
        <Row>
          {latestNews.map((news) => (
            <Col md={6} lg={4} key={news.id} className="mb-4">
              <NewsCard news={news} />
            </Col>
          ))}
        </Row>
      </section>

      {/* Tin t·ª©c ph·ªï bi·∫øn */}
      {popularNews && popularNews.length > 0 && (
        <section className="mb-5">
          <h2 className="mb-4 fw-bold text-danger">
            <i className="fas fa-fire me-2"></i>
            Tin t·ª©c ph·ªï bi·∫øn
          </h2>
          <Row>
            {popularNews.map((news) => (
              <Col md={6} lg={4} key={news.id} className="mb-4">
                <NewsCard news={news} />
              </Col>
            ))}
          </Row>
        </section>
      )}

      {/* Th·ªëng k√™ */}
      <section className="bg-light p-4 rounded">
        <Row className="text-center">
          <Col md={3}>
            <h4 className="text-primary fw-bold">{latestNews.length}+</h4>
            <p className="text-muted mb-0">Tin t·ª©c m·ªõi</p>
          </Col>
          <Col md={3}>
            <h4 className="text-success fw-bold">{featuredNews.length}</h4>
            <p className="text-muted mb-0">Tin n·ªïi b·∫≠t</p>
          </Col>
          <Col md={3}>
            <h4 className="text-warning fw-bold">24/7</h4>
            <p className="text-muted mb-0">C·∫≠p nh·∫≠t li√™n t·ª•c</p>
          </Col>
          <Col md={3}>
            <h4 className="text-danger fw-bold">100%</h4>
            <p className="text-muted mb-0">Tin ch√≠nh x√°c</p>
          </Col>
        </Row>
      </section>
    </Container>
  );
};

export default HomePage;
